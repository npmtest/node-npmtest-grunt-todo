{"/home/travis/build/npmtest/node-npmtest-grunt-todo/test.js":"/* istanbul instrument in package npmtest_grunt_todo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-todo/lib.npmtest_grunt_todo.js":"/* istanbul instrument in package npmtest_grunt_todo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_todo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_todo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-todo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-todo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_todo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_todo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_todo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_todo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_todo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_todo.__dirname + '/lib.npmtest_grunt_todo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-todo/node_modules/grunt-todo/Gruntfile.js":"/*\n * grunt-todo\n * https://github.com/Leny/grunt-todo\n *\n * Copyright (c) 2013 Leny\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    coffee: {\n      options: {\n        bare: true\n      },\n      task: {\n        files: {\n          \"tasks/todo.js\": \"src/todo.coffee\"\n        }\n      }\n    },\n\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      }\n    },\n\n    // Configuration to be run.\n    todo: {\n      default_options: {\n        options: {},\n        src: [\n          'test/*'\n        ]\n      },\n      custom_options: {\n        options: {\n          marks: [\n            {\n              pattern: \"BURP\",\n              color: \"pink\"\n            },\n            {\n              name: \"TODO\",\n              pattern: /TODO/,\n              color: \"yellow\"\n            }\n          ],\n          file: \"report.md\",\n          githubBoxes: true,\n          colophon: true,\n          usePackage: true\n        },\n        src: [\n          'test/*'\n        ],\n      },\n      custom_options_no_logging: {\n        options: {\n          marks: [\n            {\n              pattern: \"BURP\",\n              color: \"pink\"\n            },\n            {\n              name: \"TODO\",\n              pattern: /TODO/,\n              color: \"yellow\"\n            }\n          ],\n          file: \"report-2.md\",\n          githubBoxes: true,\n          colophon: true,\n          usePackage: true,\n          logOutput: false\n        },\n        src: [\n          'test/*'\n        ],\n      },\n    },\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-coffee');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  // By default, lint and run todo.\n  grunt.registerTask('default', ['coffee', 'jshint', 'todo']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-todo/node_modules/grunt-todo/tasks/todo.js":"\n/*\n * grunt-todo\n * https://github.com/Leny/grunt-todo\n *\n * Copyright (c) 2013 Leny\n * Licensed under the MIT license.\n */\n\"use strict\";\nvar chalk, table;\n\nchalk = require(\"chalk\");\n\ntable = require(\"text-table\");\n\nmodule.exports = function(grunt) {\n  return grunt.registerMultiTask(\"todo\", \"Find TODO, FIXME and NOTE inside project files\", function() {\n    var aAllowedColors, aLogFileLines, aMarks, oError, oMark, oOptions, oProjectPackage, sDefaultTitle, sDescription, sGithubBox, sHomePage, sTitle, sVersion;\n    oOptions = this.options({\n      marks: [\n        {\n          name: \"FIX\",\n          pattern: /FIXME/,\n          color: \"red\"\n        }, {\n          name: \"TODO\",\n          pattern: /TODO/,\n          color: \"yellow\"\n        }, {\n          name: \"NOTE\",\n          pattern: /NOTE/,\n          color: \"blue\"\n        }\n      ],\n      githubBoxes: false,\n      file: false,\n      title: false,\n      colophon: false,\n      usePackage: false,\n      logOutput: true\n    });\n    aAllowedColors = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\", \"gray\"];\n    sGithubBox = !!oOptions.githubBoxes ? \" [ ]\" : \"\";\n    aMarks = [];\n    aLogFileLines = [];\n    sDefaultTitle = \"Grunt TODO\";\n    if (oOptions.usePackage) {\n      try {\n        oProjectPackage = grunt.file.readJSON((process.cwd()) + \"/package.json\");\n      } catch (_error) {\n        oError = _error;\n        grunt.log.writeln(\"\");\n        grunt.log.writeln(chalk.yellow.bold(\"Oops:\"), \"No \" + (chalk.cyan('package.json')) + \" file found. Disabling \" + (chalk.green('usePackage')) + \" option.\");\n        oOptions.usePackage = false;\n      }\n    }\n    if (oOptions.file) {\n      if (sTitle = oOptions.title || (oOptions.usePackage && oProjectPackage.name ? oProjectPackage.name : false) || sDefaultTitle) {\n        if (oOptions.usePackage) {\n          if (sHomePage = oProjectPackage.homepage) {\n            aLogFileLines.push(\"# [\" + sTitle + \"]( \" + sHomePage + \" )\");\n          } else {\n            aLogFileLines.push(\"# \" + sTitle);\n          }\n          aLogFileLines.push(\"\");\n          if (sVersion = oProjectPackage.version) {\n            aLogFileLines.push(\"**Version:** `\" + sVersion + \"`\");\n            aLogFileLines.push(\"\");\n          }\n          if (sDescription = oProjectPackage.description) {\n            aLogFileLines.push(\"> \" + sDescription);\n            aLogFileLines.push(\"\");\n            aLogFileLines.push(\"* * *\");\n            aLogFileLines.push(\"\");\n          }\n        } else {\n          aLogFileLines.push(\"# \" + sTitle);\n          aLogFileLines.push(\"\");\n        }\n        if (sTitle !== sDefaultTitle) {\n          aLogFileLines.push(\"## TODO\");\n        }\n      } else {\n        aLogFileLines.push(\"# \" + sDefaultTitle);\n      }\n      aLogFileLines.push(\"\");\n    }\n    aMarks = (function() {\n      var i, len, ref, results;\n      ref = oOptions.marks;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        oMark = ref[i];\n        results.push({\n          name: oMark.name || oMark.pattern.toString(),\n          color: aAllowedColors.indexOf(oMark.color.toLowerCase()) === -1 ? \"cyan\" : oMark.color.toLowerCase(),\n          regex: oMark.pattern instanceof RegExp ? oMark.pattern : new RegExp(oMark.pattern)\n        });\n      }\n      return results;\n    })();\n    this.filesSrc.filter(function(sFilePath) {\n      return grunt.file.exists(sFilePath) && grunt.file.isFile(sFilePath);\n    }).forEach(function(sFilePath) {\n      var aFileResults, aResults;\n      aResults = [];\n      aFileResults = [];\n      grunt.file.read(sFilePath).split(/\\r*\\n/).map(function(sLine, iIndex) {\n        var i, len, oResult, results;\n        results = [];\n        for (i = 0, len = aMarks.length; i < len; i++) {\n          oMark = aMarks[i];\n          if (oResult = oMark.regex.exec(sLine)) {\n            sLine = sLine.substring(oResult.index + oResult[0].length);\n            aResults.push([chalk.gray(\"\\tline \" + (iIndex + 1)), chalk[oMark.color](oMark.name), chalk.white.italic(sLine.trim().length > 80 ? (sLine.trim().substr(0, 80)) + \"…\" : sLine.trim())]);\n            if (oOptions.file) {\n              results.push(aFileResults.push(\"- \" + sGithubBox + \" **\" + oMark.name + \"** `(line \" + (iIndex + 1) + \")` \" + sLine));\n            } else {\n              results.push(void 0);\n            }\n          } else {\n            results.push(void 0);\n          }\n        }\n        return results;\n      });\n      if (aResults.length && oOptions.logOutput) {\n        grunt.log.writeln();\n        grunt.log.writeln(chalk.underline(sFilePath));\n        grunt.log.writeln();\n        grunt.log.writeln(table(aResults));\n      }\n      if (oOptions.file && aFileResults.length) {\n        aLogFileLines.push(\"## \" + sFilePath);\n        aLogFileLines.push(\"\");\n        aLogFileLines = aLogFileLines.concat(aFileResults);\n        return aLogFileLines.push(\"\");\n      }\n    });\n    if (oOptions.file) {\n      if (oOptions.colophon) {\n        aLogFileLines.push(\"\");\n        aLogFileLines.push(\"* * *\");\n        aLogFileLines.push(\"\");\n        aLogFileLines.push(\"Last generated: \" + (grunt.template.today()) + \" by [grunt-todo](https://github.com/leny/grunt-todo).\");\n        aLogFileLines.push(\"\");\n      }\n      grunt.file.write(oOptions.file, aLogFileLines.join(\"\\n\"));\n      grunt.log.writeln();\n      return grunt.log.writeln(\"Logged in \" + (chalk.yellow(oOptions.file)));\n    }\n  });\n};\n"}